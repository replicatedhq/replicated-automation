{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template for KOTS Online Single Master install.",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "replicated_aj",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "BootVolumeSizeGB": {
      "Description" : "Boot Volume Size in GB",
      "Type": "Number",
      "Default" : 100,
      "ConstraintDescription" : "Can contain only Integer characters."
    },
    "CommonBundleUrl": {
      "Description" : "Tar GZ archive with license and config values yamls.",
      "Type": "String",
      "Default" : "https://github.com/replicatedhq/replicated-automation/raw/master/customer/cloudformation/common.tar.gz",
      "ConstraintDescription" : "Must be a tar.gz archive."
    },
    "KurlSlug": {
      "Description" : "Kurl Install Slug.",
      "Type": "String",
      "Default" : "sentry-pro",
      "ConstraintDescription" : "Must be a valid kURL Install slug."
    },
    "KotsSlug": {
      "Description" : "Kots App Slug.",
      "Type": "String",
      "Default" : "sentry-pro",
      "ConstraintDescription" : "Must be a valid KOTS App Slug."
    },
    "InstanceType" : {
      "Description" : "KOTS EC2 instance type",
      "Type" : "String",
      "Default" : "m4.xlarge",
      "AllowedValues" : [ 
        "m3.xlarge", 
        "m3.2xlarge",
        "m4.xlarge", 
        "m4.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "BootDeviceName" : {
      "Description" : "KOTS EC2 Boot device name",
      "Type" : "String",
      "Default" : "sda1",
      "ConstraintDescription" : "must be a valid EC2 instance boot device name."
    },
    "SourceLocation" : {
      "Description" : "The IP address range that can be used to access to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    } 
  },
 
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"       : {"HVM64" : "ami-053adf54573f777cf"},
      "us-west-1"       : {"HVM64" : "ami-07509d53ed1aa0b33"},
      "ap-south-1"      : {"HVM64" : "ami-0e93e3ec2cdacb2ef"}
    }
  },

  "Resources" : {

    "WebServerInstance": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M",
          "Count"   : "1"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "full_install" : [ "install_and_enable_cfn_hup", "download_replicated", "install_replicated" ]
          },
          "install_and_enable_cfn_hup" : {
            "files" : {
                        "/etc/cfn/cfn-hup.conf" : {
                          "content" : { "Fn::Join" : ["", [
                            "[main]\n",
                            "stack=", { "Ref" : "AWS::StackId" }, "\n",
                            "region=", { "Ref" : "AWS::Region" }, "\n"
                          ]]},
                          "mode"    : "000400",
                          "owner"   : "root",
                          "group"   : "root"
                        },
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                          "content": { "Fn::Join" : ["", [
                            "[cfn-auto-reloader-hook]\n",
                            "triggers=post.update\n",
                            "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                            "action=/opt/aws/bin/cfn-init -v ",
                            "         --stack ", { "Ref" : "AWS::StackName" },
                            "         --resource WebServerInstance ",
                            "         --configsets full_install ",
                            "         --region ", { "Ref" : "AWS::Region" }, "\n",
                            "runas=root\n"
                          ]]}
                        },
                        "/lib/systemd/system/cfn-hup.service": {
                          "content": { "Fn::Join" : ["", [
                            "[Unit]\n",
                            "Description=cfn-hup daemon\n\n",
                            "[Service]\n",
                            "Type=simple\n",
                            "ExecStart=/opt/aws/bin/cfn-hup\n", 
                            "Restart=always\n\n",
                            "[Install]\n",
                            "WantedBy=multi-user.target"
                          ]]}
                        }
                  },  
            "commands" : {
                  "01enable_cfn_hup" : {
                      "command" : "systemctl enable cfn-hup.service"
                  },
                  "02start_cfn_hup" : {
                      "command" : "systemctl start cfn-hup.service"
                  }
              }
           },
          "download_replicated": {
            "sources" : {
              "/tmp/replicated" : { "Ref" : "CommonBundleUrl" }
            }
          },
          "install_replicated": {
          "commands" : {
              "01install_kurl" : {
                  "command" : { "Fn::Join" : ["", ["curl -sSL https://k8s.kurl.sh/", { "Ref" : "KurlSlug" }, " | bash > /tmp/replicated/kurl_install.log 2>&1"]] }
              },
              "02install_kots" : {
                "command" : { "Fn::Join" : ["", ["kubectl kots install ", { "Ref" : "KotsSlug" }, " --namespace default --license-file /tmp/replicated/common/license.yaml --config-values /tmp/replicated/common/configvalues.yaml > /tmp/replicated/kots_install.log 2>&1"]] },
                "env" : {
                  "KUBECONFIG": "/etc/kubernetes/admin.conf",
                  "PATH" : "$PATH:/usr/bin:/usr/local/bin"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags"           : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : ["-", [{ "Ref" : "AWS::StackName" }, "master"]] }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": { "Fn::Join" : ["/", [ "/dev", { "Ref" : "BootDeviceName" } ]]},
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": { "Ref" : "BootVolumeSizeGB" },
              "DeleteOnTermination": "true",
              "Encrypted": "true"
            }
          }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "apt-get update -y\n",
          "apt-get install -y python-setuptools\n",
          "mkdir -p /opt/aws/bin\n",
          "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",
           "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WebServerInstance ",
          "         --configsets full_install ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WebServerInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
         ]]}}
      }
    },
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "SourceLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "8800", "ToPort" : "8800", "CidrIp" : { "Ref" : "SourceLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SourceLocation"}}
        ]
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Description" : "URL for newly created KOTS install.",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName" ]}]] }
    }
  }
}